{"version":3,"sources":["utils/helpers.js","components/AddItem/AddItem.js","components/ListItems/Item.js","components/ListItems/ListItems.js","utils/useStore.js","App.js","serviceWorker.js","index.js"],"names":["isEnterKey","event","executeEnterKeyFunction","keyCode","AddItem","value","onChangeHandler","onClickHandler","isButtonDisabled","trim","className","placeholder","type","onChange","onKeyDown","disabled","onClick","Item","name","isChecked","isEditing","onCheckBoxChanged","onEditButtonClicked","onItemChanged","onEditFinishClicked","onRemoveButtonClicked","checkboxChecked","strikeTextClassName","checked","xmlns","height","viewBox","width","d","fill","ListItems","items","checkBoxChanged","editClicked","itemChanged","editFinishClicked","removedClicked","length","map","item","index","key","useStore","storeName","initialState","storage","JSON","parse","localStorage","getItem","clear","useState","state","setCurrentState","newState","setItem","stringify","App","todoItem","setToDoItem","todoListItem","setToDoList","e","target","newTodoItem","todoList","splice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.77e6d517.chunk.js","sourcesContent":["const isEnterKey = (event, executeEnterKeyFunction) => {\r\n    if (event.keyCode === 13)\r\n    {\r\n        executeEnterKeyFunction();\r\n    }\r\n}\r\n\r\nexport default isEnterKey;\r\n","import React from \"react\";\r\nimport \"./AddItem.css\";\r\nimport isEnterKey  from '../../../src/utils/helpers.js';\r\n\r\nconst AddItem = ({ value, onChangeHandler, onClickHandler }) => {\r\n  let isButtonDisabled = false;\r\n  if (value.trim() === '') {\r\n    isButtonDisabled = true;\r\n  }\r\n  return (\r\n    <div className='additem'>\r\n      <div className='additem-content'>\r\n        <input\r\n          placeholder='Enter a todo item'\r\n          value={value}\r\n          type='text'\r\n          onChange={onChangeHandler}\r\n          onKeyDown={(event)=>isEnterKey(event, onClickHandler)}\r\n        />{\" \"}\r\n      </div>\r\n      <button disabled={isButtonDisabled} className='additem-button' type='button' onClick={onClickHandler}>\r\n        Add\r\n      </button>\r\n    </div>\r\n  );\r\n}; \r\n\r\nexport default AddItem;\r\n","import React from 'react';\r\nimport './Item.css';\r\nimport isEnterKey from '../../utils/helpers.js';\r\n\r\nconst Item = ({\r\n  name,\r\n  isChecked,\r\n  isEditing,\r\n  onCheckBoxChanged,\r\n  onEditButtonClicked,\r\n  onItemChanged,\r\n  onEditFinishClicked,\r\n  onRemoveButtonClicked,\r\n}) => {\r\n  let checkboxChecked = '';\r\n  let strikeTextClassName = '';\r\n  if (isChecked) {\r\n    checkboxChecked = 'checked';\r\n    strikeTextClassName = 'item-disabled';\r\n  }\r\n\r\n  return (\r\n    <div className='item'>\r\n      <input\r\n        type='checkbox'\r\n        checked={checkboxChecked}\r\n        onChange={onCheckBoxChanged}\r\n      />\r\n      {isEditing && (\r\n        <>\r\n          <input\r\n            type='text'\r\n            value={name}\r\n            onChange={onItemChanged}\r\n            onKeyDown={(event) => isEnterKey(event, onEditFinishClicked)}\r\n          />\r\n          <button className='item-button' onClick={onEditFinishClicked}>\r\n            <svg\r\n              xmlns='http://www.w3.org/2000/svg'\r\n              height='24'\r\n              viewBox='0 0 24 24'\r\n              width='24'\r\n            >\r\n              <path d='M0 0h24v24H0V0z' fill='none' />\r\n              <path d='M19.77 4.93l1.4 1.4L8.43 19.07l-5.6-5.6 1.4-1.4 4.2 4.2L19.77 4.93m0-2.83L8.43 13.44l-4.2-4.2L0 13.47l8.43 8.43L24 6.33 19.77 2.1z' />\r\n            </svg>\r\n          </button>\r\n        </>\r\n      )}\r\n      {!isEditing && (\r\n        <>\r\n          <span className={strikeTextClassName}>{name}</span>\r\n          <button\r\n            disabled={isChecked}\r\n            className='item-button'\r\n            onClick={onEditButtonClicked}\r\n          >\r\n            <svg xmlns='http://www.w3.org/2000/svg' height='24' width='24'>\r\n              <path d='M0 0h24v24H0V0z' fill='none' />\r\n              <path d='M14.06 9.02l.92.92L5.92 19H5v-.92l9.06-9.06M17.66 3c-.25 0-.51.1-.7.29l-1.83 1.83 3.75 3.75 1.83-1.83c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.2-.2-.45-.29-.71-.29zm-3.6 3.19L3 17.25V21h3.75L17.81 9.94l-3.75-3.75z' />\r\n            </svg>\r\n          </button>\r\n        </>\r\n      )}\r\n\r\n      <button className='item-button' onClick={onRemoveButtonClicked}>\r\n        <svg\r\n          xmlns='http://www.w3.org/2000/svg'\r\n          height='24'\r\n          viewBox='0 0 24 24'\r\n          width='24'\r\n        >\r\n          <path d='M0 0h24v24H0V0z' fill='none' />\r\n          <path d='M16 9v10H8V9h8m-1.5-6h-5l-1 1H5v2h14V4h-3.5l-1-1zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7z' />\r\n        </svg>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Item;\r\n","import React from 'react';\r\nimport './ListItems.css';\r\nimport Item from './Item.js';\r\n\r\nconst ListItems = ({\r\n  items,\r\n  checkBoxChanged,\r\n  editClicked,\r\n  itemChanged,\r\n  editFinishClicked,\r\n  removedClicked\r\n}) => {\r\n  if (items.length > 0)\r\n    return (\r\n      <div className='items'>\r\n        {items.map((item, index) => {\r\n          return (\r\n            <Item\r\n              key={index}\r\n              name={item.name}\r\n              isChecked={item.isChecked}\r\n              isEditing={item.isEditing}\r\n              onCheckBoxChanged={() => checkBoxChanged(index)}\r\n              onEditButtonClicked={() => editClicked(index)}\r\n              onItemChanged={(event) => itemChanged(index, event)}\r\n              onEditFinishClicked={() => editFinishClicked(index)}\r\n              onRemoveButtonClicked={() => removedClicked(index)}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  return null;\r\n};\r\n\r\nexport default ListItems;\r\n","import { useState } from 'react';\r\n\r\nconst useStore = (storeName, initialState) => {\r\n  let storage = null;\r\n  try {\r\n    storage = JSON.parse(localStorage.getItem(storeName)) \r\n  } catch {\r\n    storage= null;\r\n    localStorage.clear();\r\n  }\r\n    const [state, setCurrentState] = useState(\r\n      storage || initialState\r\n    );\r\n\r\n    const setState = (newState) => {\r\n      setCurrentState(newState);\r\n      localStorage.setItem(storeName, JSON.stringify(newState));\r\n    };\r\n    return [state, setState];\r\n \r\n};\r\n\r\nexport default useStore;\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport AddItem from './components/AddItem/AddItem.js';\r\nimport ListItems from './components/ListItems/ListItems.js';\r\nimport useStore from './utils/useStore.js';\r\n\r\nconst App = () => {\r\n  const [todoItem, setToDoItem] = useState('');\r\n  const [todoListItem, setToDoList] = useStore('todos', []);\r\n\r\n  const handleChange = (e) => {\r\n    setToDoItem(e.target.value);\r\n  };\r\n  const handleAddItemClick = () => {\r\n    if (todoItem.trim() !== '') {\r\n      let newTodoItem = {\r\n        isChecked: false,\r\n        name: todoItem,\r\n        isEditing: false,\r\n      };\r\n      let todoList = [...todoListItem, newTodoItem];\r\n      setToDoList(todoList);      \r\n    }\r\n    setToDoItem('');\r\n  };\r\n  const handleCheckBoxChange = (index) => {\r\n    const todoList = [...todoListItem];\r\n    const todoItem = todoList[index];\r\n    todoItem.isChecked = !todoItem.isChecked;\r\n    if (todoItem.isChecked) {\r\n      todoItem.isEditing = false;\r\n    }\r\n    setToDoList(todoList);\r\n  };\r\n  const handleEditButtonClick = (index) => {\r\n    const todoList = [...todoListItem];\r\n    const todoItem = todoList[index];\r\n    todoItem.isEditing = true;\r\n    setToDoList(todoList);\r\n  };\r\n  const handleItemChange = (index, event) => {\r\n    const todoList = [...todoListItem];\r\n    const todoItem = todoList[index];\r\n    todoItem.name = event.target.value;\r\n    setToDoList(todoList);\r\n  };\r\n  const handleEditFinishedClick = (index) => {\r\n    const todoList = [...todoListItem];\r\n    const todoItem = todoList[index];\r\n    todoItem.isEditing = false;\r\n    setToDoList(todoList);\r\n  };\r\n  const handleRemoveClick = (index) => {\r\n    const todoList = [...todoListItem];\r\n    todoList.splice(index,1);\r\n    setToDoList(todoList);\r\n  };\r\n  return (\r\n    <main>\r\n      <h1>To Do List</h1>\r\n      <AddItem\r\n        value={todoItem}\r\n        onChangeHandler={handleChange}\r\n        onClickHandler={handleAddItemClick}\r\n      />\r\n      <ListItems\r\n        items={todoListItem}\r\n        checkBoxChanged={handleCheckBoxChange}\r\n        editClicked={handleEditButtonClick}\r\n        itemChanged={handleItemChange}\r\n        editFinishClicked={handleEditFinishedClick}\r\n        removedClicked={handleRemoveClick}\r\n      />\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport PageNotFound from './PageNotFound';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  ((\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  )\r\n  // ,\r\n  // (\r\n  //   <Router>\r\n  //     <Switch>\r\n  //       <Route exact path='/to-do' component={App} />\r\n  //       <Route component={PageNotFound} />\r\n  //     </Switch>\r\n  //   </Router>\r\n  // )\r\n  ),\r\n  //  <App/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}