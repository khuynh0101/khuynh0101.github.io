{"version":3,"sources":["contexts/BlogContext.js","hooks/useStore.js","components/InputText/InputText.js","utils/checkEnterKey.js","utils/findPost.js","components/Posts/Post/PostFeature.js","utils/formatDate.js","components/Posts/Post/Post.js","components/Posts/Posts.js","components/Blog/Blog.js","App.js","serviceWorker.js","index.js"],"names":["BlogContext","createContext","BlogProvider","children","storeName","initialState","useState","posts","state","setCurrentState","setState","newState","useEffect","useStore","blogPosts","setBlogPosts","Provider","value","useBlogContext","useContext","InputText","onInputTextChanged","onSendButtonClicked","textCounter","length","isSendButtonDisabled","trim","className","onChange","onKeyDown","event","executeEnterKeyFunction","keyCode","checkEnterKey","placeholder","type","disabled","onClick","xmlns","height","viewBox","width","d","fill","findPost","targetindex","PostFeature","index","features","isReply","setReplyStatus","replyText","setReplyText","likeClassName","count","isLike","getReplyJSON","text","date","Date","now","avatar","post","target","handleInputTextChanged","replyJSON","replies","handleReplySendButtonClick","formatDate","dateInMilliseconds","diffInSeconds","i","parseInt","hours","getHours","minutes","getMinutes","ampm","strTime","toLocaleString","month","getDate","getFullYear","Post","hoverStatus","setHoverStatus","toggleOnHover","renderPostContent","isMyPost","onMouseEnter","onMouseLeave","name","handle","map","reply","key","Posts","messagesEndRef","useRef","setTimeout","current","scrollIntoView","behavior","ref","Blog","postText","setPostText","e","newPost","isHovered","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.16d81e3d.chunk.js","sourcesContent":["import React, { createContext, useContext } from 'react';\r\nimport { useStore } from '../hooks/useStore';\r\n\r\nconst BlogContext = createContext([]);\r\n\r\nexport const BlogProvider = ({ children }) => {\r\n  const [blogPosts, setBlogPosts] = useStore([]);\r\n\r\n  return (\r\n    <BlogContext.Provider value={[blogPosts, setBlogPosts]}>\r\n      {children}\r\n    </BlogContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useBlogContext = () => {\r\n  const [blogPosts, setBlogPosts] = useContext(BlogContext);\r\n  return [blogPosts, setBlogPosts];\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport posts from '../data/blog-posts.json';\r\n\r\nexport const useStore = (storeName, initialState) => {\r\n  const [state, setCurrentState] = useState(posts || initialState);\r\n  const setState = (newState) => {\r\n    setCurrentState(newState);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setState(posts);\r\n  }, []);\r\n\r\n  return [state, setState];\r\n};\r\n","import React from 'react';\r\nimport './InputText.css';\r\nimport { checkEnterKey } from '../../utils/checkEnterKey';\r\n\r\nexport const InputText = ({\r\n  value,\r\n  onInputTextChanged,\r\n  onSendButtonClicked,\r\n}) => {\r\n  const placeHolderText = \"What's happening?\";\r\n  let textCounter = 140;\r\n  textCounter -= value.length;\r\n  const isSendButtonDisabled = value.trim().length === 0 ? true : false;\r\n  return (\r\n    <div className='input-container'>\r\n      <span className='input-counter'>{textCounter}</span>\r\n      <input\r\n        onChange={onInputTextChanged}\r\n        onKeyDown={(event) => checkEnterKey(event, onSendButtonClicked)}\r\n        className='input'\r\n        placeholder={placeHolderText}\r\n        type='text'\r\n        value={value}\r\n      />\r\n      <button\r\n        className='input-button'\r\n        disabled={isSendButtonDisabled}\r\n        onClick={onSendButtonClicked}\r\n      >\r\n        <svg\r\n          className='input-button-svg'\r\n          xmlns='http://www.w3.org/2000/svg'\r\n          height='32'\r\n          viewBox='0 0 24 24'\r\n          width='32'\r\n        >\r\n          <path d='M0 0h24v24H0z' fill='none' />\r\n          <path d='M2.01 21L23 12 2.01 3 2 10l15 2-15 2z' />\r\n        </svg>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","export const checkEnterKey = (event, executeEnterKeyFunction) => {\r\n  if (event.keyCode === 13) {\r\n    executeEnterKeyFunction();\r\n  }\r\n};\r\n","export const findPost = (blogPosts, targetindex) => {\r\n  const posts = [...blogPosts];\r\n  const post = posts[targetindex];\r\n  return [posts, post];\r\n};\r\n","import React, { useState } from 'react';\r\nimport './PostFeature.css';\r\nimport { InputText } from '../../../components/InputText/InputText';\r\nimport { useBlogContext } from '../../../contexts/BlogContext';\r\nimport { findPost } from '../../../utils/findPost';\r\n\r\nexport const PostFeature = ({ index, features }) => {\r\n  const [blogPosts, setBlogPosts] = useBlogContext();\r\n\r\n  const [isReply, setReplyStatus] = useState(false);\r\n  const [replyText, setReplyText] = useState('');\r\n\r\n  let likeClassName = 'feature-item-button';\r\n  let count = 0;\r\n  if (features && features.isLike) {\r\n    likeClassName += ' selected';\r\n    count = features.count;\r\n  }\r\n\r\n  const handleLikeButtonClick = () => {\r\n    const [posts, post] = findPost(blogPosts, index);\r\n    if (post) {\r\n      if (!post.features) {\r\n        //have to create features object if doesn't exists\r\n        post.features = {};\r\n        post.features.isLike = true;\r\n        if (!post.features.count) post.features.count = 0;\r\n        post.features.count++;\r\n      } else post.features.count++;\r\n      setBlogPosts(posts);\r\n    }\r\n  };\r\n\r\n  const handleStartReplyClick = (index) => {\r\n    setReplyStatus(!isReply);\r\n    if (!isReply) setReplyText('');\r\n  };\r\n\r\n  const handleInputTextChanged = (event) => {\r\n    setReplyText(event.target.value);\r\n  };\r\n\r\n  const handleReplySendButtonClick = () => {\r\n    if (replyText.trim().length > 0) {\r\n      const replyJSON = getReplyJSON(replyText);\r\n      const [posts, post] = findPost(blogPosts, index);\r\n      if (post) {\r\n        if (!post.replies) {\r\n          post.replies = [replyJSON];\r\n        } else {\r\n          post.replies = [...post.replies, replyJSON];\r\n        }\r\n        setBlogPosts(posts);\r\n      }\r\n    }\r\n    setReplyText('');\r\n  };\r\n\r\n  const getReplyJSON = (replyText) => {\r\n    return {\r\n      text: replyText,\r\n      date: Date.now(),\r\n      avatar: 'KH',\r\n    };\r\n  };\r\n  return (\r\n    <div className='feature'>\r\n      <div className='feature-item'>\r\n        <button className={likeClassName} onClick={handleLikeButtonClick}>\r\n          <svg\r\n            xmlns='http://www.w3.org/2000/svg'\r\n            height='24'\r\n            viewBox='0 0 24 24'\r\n            width='24'\r\n          >\r\n            <path d='M0 0h24v24H0z' fill='none' />\r\n            <path d='M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z' />\r\n          </svg>\r\n        </button>\r\n        <div className='feature-item-counter'>{count}</div>\r\n        <button className='feature-item-button' onClick={handleStartReplyClick}>\r\n          <svg\r\n            xmlns='http://www.w3.org/2000/svg'\r\n            height='24'\r\n            viewBox='0 0 24 24'\r\n            width='24'\r\n          >\r\n            <path d='M0 0h24v24H0z' fill='none' />\r\n            <path d='M10 9V5l-7 7 7 7v-4.1c5 0 8.5 1.6 11 5.1-1-5-4-10-11-11z' />\r\n          </svg>\r\n        </button>\r\n      </div>\r\n      {isReply && (\r\n        <div className='reply-input-container'>\r\n          <InputText\r\n            value={replyText}\r\n            onInputTextChanged={(event) => handleInputTextChanged(event)}\r\n            onSendButtonClicked={(value) => handleReplySendButtonClick()}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","export const formatDate = (dateInMilliseconds) => {\r\n  const dateNowInSeconds = Date.now();\r\n  const diffInSeconds = dateNowInSeconds - dateInMilliseconds;\r\n\r\n  if (diffInSeconds < 60000) return 'less than a minute';\r\n\r\n  for (let i = 1; i <= 2; i++) {\r\n    if (diffInSeconds <= 3600000 * i) return 'less than ' + i + ' hour ago';\r\n  }\r\n  if (diffInSeconds >= 86400000 && diffInSeconds < 172800000)\r\n    return '1 day ago';\r\n\r\n  const date = new Date(parseInt(dateInMilliseconds));\r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0' + minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return (\r\n    date.toLocaleString('default', { month: 'long' }) +\r\n    ' ' +\r\n    date.getDate() +\r\n    ', ' +\r\n    date.getFullYear() +\r\n    '  ' +\r\n    strTime\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport './Post.css';\r\nimport { PostFeature } from './PostFeature';\r\nimport { formatDate } from '../../../utils/formatDate';\r\n\r\nexport const Post = ({ index, post }) => {\r\n  const [hoverStatus, setHoverStatus] = useState(false);\r\n\r\n  const toggleOnHover = () => {\r\n    setHoverStatus(!hoverStatus);\r\n  };\r\n\r\n  const renderPostFeature = () => {\r\n    if (hoverStatus) {\r\n      return <PostFeature index={index} features={post.features} />;\r\n    } else return null;\r\n  };\r\n  const renderPostContent = (text, date, avatar) => {\r\n    return (\r\n      <>\r\n        <div></div>\r\n        <div>\r\n          <div className='blog-item-header-flex'>\r\n            <h2 className='blog-item-header-timestamp'>{formatDate(date)}</h2>\r\n          </div>\r\n          <p className='blog-item-content mycontent'>{text}</p>\r\n        </div>\r\n        <div className='blog-item-avatar right'>{avatar}</div>\r\n      </>\r\n    );\r\n  };\r\n  return (\r\n    <article className='blog-article'>\r\n      <div className='blog-item'>\r\n        {!post.isMyPost && (\r\n          <>\r\n            <div className='blog-item-avatar'>{post.avatar}</div>\r\n            <div\r\n              className='blog-item-container'\r\n              onMouseEnter={toggleOnHover}\r\n              onMouseLeave={toggleOnHover}\r\n            >\r\n              <div className='blog-item-header-flex'>\r\n                <h2 className='blog-item-header-name'>\r\n                  {post.name} - {post.handle}\r\n                </h2>\r\n                <h2 className='blog-item-header-timestamp'>\r\n                  {formatDate(post.date)}\r\n                </h2>\r\n              </div>\r\n              <p className='blog-item-content'>{post.text}</p>\r\n              {renderPostFeature()}\r\n            </div>\r\n          </>\r\n        )}\r\n\r\n        {post.isMyPost && (\r\n          <>{renderPostContent(post.text, post.date, post.avatar)}</>\r\n        )}\r\n      </div>\r\n      {post.replies &&\r\n        post.replies.map((reply, index) => {\r\n          return (\r\n            <div key={index} className='blog-item reply'>\r\n              {renderPostContent(reply.text, reply.date, reply.avatar)}\r\n            </div>\r\n          );\r\n        })}\r\n    </article>\r\n  );\r\n};\r\n","import React, { useEffect, useRef } from 'react';\r\nimport './Posts.css';\r\nimport { Post } from './Post/Post';\r\nimport { useBlogContext } from '../../contexts/BlogContext';\r\n\r\nexport const Posts = ({}) => {\r\n  const [posts] = useBlogContext();\r\n  //allows scroll to botttom automatically\r\n  const messagesEndRef = useRef(null);\r\n  const scrollToBottom = () => {\r\n    setTimeout(() => {\r\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\r\n    }, 200); //settimeout is needed for mobile devices\r\n  };\r\n  useEffect(scrollToBottom, [posts]);\r\n\r\n  return (\r\n    <div className='blogs'>\r\n      {posts.map((post, index) => {\r\n        return <Post key={index} index={index} post={post} />;\r\n      })}\r\n      <div ref={messagesEndRef} />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Posts } from '../../components/Posts/Posts';\r\nimport { InputText } from '../../components/InputText/InputText';\r\nimport { useBlogContext } from '../../contexts/BlogContext';\r\n\r\nexport const Blog = () => {\r\n  const [postText, setPostText] = useState('');\r\n  const [blogPosts, setBlogPosts] = useBlogContext();\r\n\r\n  const handleInputTextChanged = (e) => {\r\n    //change max length into context\r\n    if (e.target.value.length <= 140) setPostText(e.target.value);\r\n  };\r\n\r\n  const handlePostClicked = () => {\r\n    if (postText.trim().length > 0) {\r\n      const newPost = {\r\n        avatar: 'KH',\r\n        name: 'Khuong Huynh',\r\n        handle: '@khuonghuynh',\r\n        date: Date.now(),\r\n        text: postText,\r\n        isMyPost: true,\r\n        isHovered: false,\r\n        features: {\r\n          isLike: false,\r\n          count: 0,\r\n        },\r\n        replies: [],\r\n      };\r\n      const posts = [...blogPosts, newPost];\r\n      setBlogPosts(posts);\r\n      setPostText('');\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <div className='container'>\r\n        <h1>Micro Blog</h1>\r\n        <Posts />\r\n        <div className='blog-input-container'>\r\n          <InputText\r\n            value={postText}\r\n            onInputTextChanged={handleInputTextChanged}\r\n            onSendButtonClicked={handlePostClicked}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport { BlogProvider } from './contexts/BlogContext';\r\nimport { Blog } from './components/Blog/Blog';\r\n\r\nexport const App = () => {\r\n  return (\r\n    <BlogProvider>\r\n      <Blog />\r\n    </BlogProvider>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}